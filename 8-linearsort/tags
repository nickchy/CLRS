!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BOOST_INCLUDEDIR	Makefile	/^BOOST_INCLUDEDIR = \/home\/nick\/boost_1_51_0\/include\/$/;"	m
BOOST_LIBDIR	Makefile	/^BOOST_LIBDIR = \/home\/nick\/boost_1_51_0\/lib\/$/;"	m
CC	Makefile	/^CC= g++$/;"	m
CFLAGS	Makefile	/^CFLAGS= -g -O0$/;"	m
COMMAND	Makefile	/^COMMAND= Main$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS := \\$/;"	m
CountSort	LinearSort.cpp	/^    void CountSort (vector<int> const& list, vector<int>& sortedList,int num) $/;"	f	signature:(vector<int> const& list, vector<int>& sortedList,int num)
CountSort	LinearSort.hpp	/^    void CountSort (vector<int> const& , vector<int>& ,int ); $/;"	p	signature:(vector<int> const& , vector<int>& ,int )
HDRS	Makefile	/^HDRS= \\$/;"	m
INCLUDEDIR	Makefile	/^INCLUDEDIR = \/home\/nick\/CLRS\/util\/$/;"	m
LDFLAGS	Makefile	/^LDFLAGS  := \\$/;"	m
LIBDIR	Makefile	/^LIBDIR = \/home\/nick\/CLRS\/util\/$/;"	m
LIB_SMODULES	Makefile	/^LIB_SMODULES := $(addprefix -l,$(SMODULES))$/;"	m
LINEARSORT_H	LinearSort.hpp	19;"	d
MAKEFILE	Makefile	/^MAKEFILE= make_sort.mak$/;"	m
MOREFLAGS	Makefile	/^MOREFLAGS= -ansi -pedantic -Wpointer-arith -Wcast-qual -Wcast-align \\$/;"	m
MergeSort	Main.cpp	/^    SortAlgo<double>::MergeSort(list2,0,length-1);$/;"	p	class:SortAlgo	file:	signature:(list2,0,length-1)
MergeSort	Main.cpp	/^    SortAlgo<int>::MergeSort(list1,0,length-1);$/;"	p	class:SortAlgo	file:	signature:(list1,0,length-1)
MergeSort	Main.cpp	/^    SortAlgo<int>::MergeSort(list1,2,length-2);$/;"	p	class:SortAlgo	file:	signature:(list1,2,length-2)
OBJS	Makefile	/^OBJS= $(addsuffix .o, $(basename $(SRCS)))$/;"	m
QuickSort	Main.cpp	/^    SortAlgo<double>::QuickSort(list2,0,length-1);$/;"	p	class:SortAlgo	file:	signature:(list2,0,length-1)
QuickSort	Main.cpp	/^    SortAlgo<int>::QuickSort(list1,0,length-1);$/;"	p	class:SortAlgo	file:	signature:(list1,0,length-1)
RandomQuickSort	Main.cpp	/^    SortAlgo<double>::RandomQuickSort(list2,0,length-1);$/;"	p	class:SortAlgo	file:	signature:(list2,0,length-1)
RandomQuickSort	Main.cpp	/^    SortAlgo<int>::RandomQuickSort(list1,0,length-1);$/;"	p	class:SortAlgo	file:	signature:(list1,0,length-1)
SHELL	Makefile	/^SHELL=\/bin\/sh$/;"	m
SMODULES	Makefile	/^SMODULES := \\$/;"	m
SRCS	Makefile	/^SRCS= \\$/;"	m
SortAlgo::MergeSort	Main.cpp	/^    SortAlgo<double>::MergeSort(list2,0,length-1);$/;"	p	class:SortAlgo	file:	signature:(list2,0,length-1)
SortAlgo::MergeSort	Main.cpp	/^    SortAlgo<int>::MergeSort(list1,0,length-1);$/;"	p	class:SortAlgo	file:	signature:(list1,0,length-1)
SortAlgo::MergeSort	Main.cpp	/^    SortAlgo<int>::MergeSort(list1,2,length-2);$/;"	p	class:SortAlgo	file:	signature:(list1,2,length-2)
SortAlgo::QuickSort	Main.cpp	/^    SortAlgo<double>::QuickSort(list2,0,length-1);$/;"	p	class:SortAlgo	file:	signature:(list2,0,length-1)
SortAlgo::QuickSort	Main.cpp	/^    SortAlgo<int>::QuickSort(list1,0,length-1);$/;"	p	class:SortAlgo	file:	signature:(list1,0,length-1)
SortAlgo::RandomQuickSort	Main.cpp	/^    SortAlgo<double>::RandomQuickSort(list2,0,length-1);$/;"	p	class:SortAlgo	file:	signature:(list2,0,length-1)
SortAlgo::RandomQuickSort	Main.cpp	/^    SortAlgo<int>::RandomQuickSort(list1,0,length-1);$/;"	p	class:SortAlgo	file:	signature:(list1,0,length-1)
WARNFLAGS	Makefile	/^WARNFLAGS= -Werror -Wall$/;"	m
countvec	LinearSort.cpp	/^    vector<int>countvec(num);$/;"	p	file:	signature:(num)
endl	Main.cpp	/^    cout<<argv[1]<<endl;$/;"	l
length	Main.cpp	/^    int length =atoi(argv[1]);$/;"	l
list1	Main.cpp	/^    vector<int> list1;$/;"	l
list2	Main.cpp	/^    vector<double> list2;$/;"	l
main	Main.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
resize	LinearSort.cpp	/^    sortedlist.resize(list.size());$/;"	p	file:	signature:(list.size())
resize	Main.cpp	/^    list1.resize(length);$/;"	p	file:	signature:(length)
resize	Main.cpp	/^    list2.resize(length);$/;"	p	file:	signature:(length)
seed	Main.cpp	/^    unsigned int seed = (unsigned int)time(NULL);$/;"	l
vector	LinearSort.cpp	/^typedef std::vector vector;$/;"	t	file:
vector	LinearSort.hpp	/^typedef std::vector vector;$/;"	t
