!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BOOST_INCLUDEDIR	Makefile	/^BOOST_INCLUDEDIR = \/home\/nick\/boost_1_51_0\/include\/$/;"	m
BOOST_LIBDIR	Makefile	/^BOOST_LIBDIR = \/home\/nick\/boost_1_51_0\/lib\/$/;"	m
CC	Makefile	/^CC= g++$/;"	m
CFLAGS	Makefile	/^CFLAGS= -g -O0$/;"	m
COMMAND	Makefile	/^COMMAND= Main$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS := \\$/;"	m
CurrElemNum	Stack.hpp	/^    int       CurrElemNum;    \/\/ The current number of elements$/;"	m	class:Stack	access:protected
Data	Stack.hpp	/^    T     *Data;           \/\/ The actual Data array$/;"	m	class:Stack	access:protected
HDRS	Makefile	/^HDRS= \\$/;"	m
INCLUDEDIR	Makefile	/^INCLUDEDIR = \/home\/nick\/CLRS\/util\/$/;"	m
LDFLAGS	Makefile	/^LDFLAGS  := \\$/;"	m
LIBDIR	Makefile	/^LIBDIR = \/home\/nick\/CLRS\/util\/$/;"	m
LIB_SMODULES	Makefile	/^LIB_SMODULES := $(addprefix -l,$(SMODULES))$/;"	m
List::MakeList	Main.cpp	/^    List::MakeList(list1, length);$/;"	p	class:List	file:	signature:(list1, length)
List::MakeList	Main.cpp	/^    List::MakeList(list2, length);$/;"	p	class:List	file:	signature:(list2, length)
List::PrintList	Main.cpp	/^    List::PrintList(list1);$/;"	p	class:List	file:	signature:(list1)
List::PrintList	Main.cpp	/^    List::PrintList(list2);$/;"	p	class:List	file:	signature:(list2)
MAKEFILE	Makefile	/^MAKEFILE= Makefile$/;"	m
MAX_NUM	Stack.hpp	/^    const int MAX_NUM;        \/\/ Maximum number of elements$/;"	m	class:Stack	access:protected
MOREFLAGS	Makefile	/^MOREFLAGS= -ansi -pedantic -Wpointer-arith -Wcast-qual -Wcast-align \\$/;"	m
MakeList	Main.cpp	/^    List::MakeList(list1, length);$/;"	p	class:List	file:	signature:(list1, length)
MakeList	Main.cpp	/^    List::MakeList(list2, length);$/;"	p	class:List	file:	signature:(list2, length)
Max	Main.cpp	/^    OrderStat::Max<double>(list2,maxdouble);$/;"	p	class:OrderStat	file:	signature:(list2,maxdouble)
Max	Main.cpp	/^    OrderStat::Max<int>(list1,maxint);$/;"	p	class:OrderStat	file:	signature:(list1,maxint)
Min	Main.cpp	/^    OrderStat::Min<double>(list2,mindouble);   $/;"	p	class:OrderStat	file:	signature:(list2,mindouble)
Min	Main.cpp	/^    OrderStat::Min<int>(list1,minint);   $/;"	p	class:OrderStat	file:	signature:(list1,minint)
MinMax	Main.cpp	/^    OrderStat::MinMax<double>(list2, maxdouble, mindouble);$/;"	p	class:OrderStat	file:	signature:(list2, maxdouble, mindouble)
MinMax	Main.cpp	/^    OrderStat::MinMax<int>(list1, maxint, minint);$/;"	p	class:OrderStat	file:	signature:(list1, maxint, minint)
OBJS	Makefile	/^OBJS= $(addsuffix .o, $(basename $(SRCS)))$/;"	m
OrderStat::Max	Main.cpp	/^    OrderStat::Max<double>(list2,maxdouble);$/;"	p	class:OrderStat	file:	signature:(list2,maxdouble)
OrderStat::Max	Main.cpp	/^    OrderStat::Max<int>(list1,maxint);$/;"	p	class:OrderStat	file:	signature:(list1,maxint)
OrderStat::Min	Main.cpp	/^    OrderStat::Min<double>(list2,mindouble);   $/;"	p	class:OrderStat	file:	signature:(list2,mindouble)
OrderStat::Min	Main.cpp	/^    OrderStat::Min<int>(list1,minint);   $/;"	p	class:OrderStat	file:	signature:(list1,minint)
OrderStat::MinMax	Main.cpp	/^    OrderStat::MinMax<double>(list2, maxdouble, mindouble);$/;"	p	class:OrderStat	file:	signature:(list2, maxdouble, mindouble)
OrderStat::MinMax	Main.cpp	/^    OrderStat::MinMax<int>(list1, maxint, minint);$/;"	p	class:OrderStat	file:	signature:(list1, maxint, minint)
OrderStat::RandomizedSelection	Main.cpp	/^    OrderStat::RandomizedSelection<double>(list2, 0, length-1, 3)<<"\\n";$/;"	p	class:OrderStat	file:	signature:(list2, 0, length-1, 3)
OrderStat::RandomizedSelection	Main.cpp	/^    std::cout<<"For integer vector the third smallest member is:"<< OrderStat::RandomizedSelection<int>(list1, 0, length-1, 3)<<"\\n";$/;"	p	class:OrderStat	file:	signature:(list1, 0, length-1, 3)
Peek	Stack.hpp	/^    inline const <T> &Peek(int Depth) const;  \/\/ Peek a depth downwards$/;"	p	class:Stack	access:public	signature:(int Depth) const
Peek	Stack.hpp	/^inline const T &Stack<T>::Peek(int Depth) const$/;"	f	class:Stack	signature:(int Depth) const
Pop	Stack.hpp	/^    inline T        Pop(void);              \/\/ Returns Item from the top$/;"	p	class:Stack	access:public	signature:(void)
PrintList	Main.cpp	/^    List::PrintList(list1);$/;"	p	class:List	file:	signature:(list1)
PrintList	Main.cpp	/^    List::PrintList(list2);$/;"	p	class:List	file:	signature:(list2)
Push	Stack.hpp	/^    inline void        Push(const T &Item); \/\/ Adds Item to the top$/;"	p	class:Stack	access:public	signature:(const T &Item)
Push	Stack.hpp	/^inline void Stack<T>::Push(const T &Item)$/;"	f	class:Stack	signature:(const T &Item)
RandomizedSelection	Main.cpp	/^    OrderStat::RandomizedSelection<double>(list2, 0, length-1, 3)<<"\\n";$/;"	p	class:OrderStat	file:	signature:(list2, 0, length-1, 3)
RandomizedSelection	Main.cpp	/^    std::cout<<"For integer vector the third smallest member is:"<< OrderStat::RandomizedSelection<int>(list1, 0, length-1, 3)<<"\\n";$/;"	p	class:OrderStat	file:	signature:(list1, 0, length-1, 3)
SHELL	Makefile	/^SHELL=\/bin\/sh$/;"	m
SMODULES	Makefile	/^SMODULES := \\$/;"	m
SRCS	Makefile	/^SRCS= \\$/;"	m
STACK_H	Stack.hpp	19;"	d
Stack	Stack.hpp	/^    Stack(const Stack<T> &OtherStack);$/;"	p	class:Stack	access:public	signature:(const Stack<T> &OtherStack)
Stack	Stack.hpp	/^    Stack(int MaxSize=500);$/;"	p	class:Stack	access:public	signature:(int MaxSize=500)
Stack	Stack.hpp	/^Stack<T>::Stack(int MaxSize) :$/;"	f	class:Stack	signature:(int MaxSize)
Stack	Stack.hpp	/^class Stack$/;"	c
Stack::CurrElemNum	Stack.hpp	/^    int       CurrElemNum;    \/\/ The current number of elements$/;"	m	class:Stack	access:protected
Stack::Data	Stack.hpp	/^    T     *Data;           \/\/ The actual Data array$/;"	m	class:Stack	access:protected
Stack::MAX_NUM	Stack.hpp	/^    const int MAX_NUM;        \/\/ Maximum number of elements$/;"	m	class:Stack	access:protected
Stack::Peek	Stack.hpp	/^    inline const <T> &Peek(int Depth) const;  \/\/ Peek a depth downwards$/;"	p	class:Stack	access:public	signature:(int Depth) const
Stack::Peek	Stack.hpp	/^inline const T &Stack<T>::Peek(int Depth) const$/;"	f	class:Stack	signature:(int Depth) const
Stack::Pop	Stack.hpp	/^    inline T        Pop(void);              \/\/ Returns Item from the top$/;"	p	class:Stack	access:public	signature:(void)
Stack::Push	Stack.hpp	/^    inline void        Push(const T &Item); \/\/ Adds Item to the top$/;"	p	class:Stack	access:public	signature:(const T &Item)
Stack::Push	Stack.hpp	/^inline void Stack<T>::Push(const T &Item)$/;"	f	class:Stack	signature:(const T &Item)
Stack::Stack	Stack.hpp	/^    Stack(const Stack<T> &OtherStack);$/;"	p	class:Stack	access:public	signature:(const Stack<T> &OtherStack)
Stack::Stack	Stack.hpp	/^    Stack(int MaxSize=500);$/;"	p	class:Stack	access:public	signature:(int MaxSize=500)
Stack::Stack	Stack.hpp	/^Stack<T>::Stack(int MaxSize) :$/;"	f	class:Stack	signature:(int MaxSize)
Stack::~Stack	Stack.hpp	/^    ~Stack(void);$/;"	p	class:Stack	access:public	signature:(void)
Stack::~Stack	Stack.hpp	/^Stack<T>::~Stack(void)$/;"	f	class:Stack	signature:(void)
WARNFLAGS	Makefile	/^WARNFLAGS= -Werror -Wall$/;"	m
cout	Main.cpp	/^    std::cout<<"For double vector:\\n";$/;"	m	class:std	file:
cout	Main.cpp	/^    std::cout<<"For int vector:\\n";$/;"	m	class:std	file:
cout	Main.cpp	/^    std::cout<<"max: \\n\\n";$/;"	m	class:std	file:
endl	Main.cpp	/^    std::cout<<argv[1]<<std::endl;$/;"	m	class:std	file:
length	Main.cpp	/^    int length =atoi(argv[1]);$/;"	l
list1	Main.cpp	/^    std::vector<int> list1;$/;"	l
list2	Main.cpp	/^    std::vector<double> list2;$/;"	l
main	Main.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
maxdouble	Main.cpp	/^    double maxdouble, mindouble;$/;"	l
maxdouble	Main.cpp	/^    std::cout<<"from MinMax funciton, min is "<<mindouble<<" and max is: "<<maxdouble<<" \\n";  $/;"	l
maxdouble	Main.cpp	/^    std::cout<<"max of the double vector is: "<<maxdouble<<"\\n";$/;"	l
maxint	Main.cpp	/^    int maxint, minint;$/;"	l
maxint	Main.cpp	/^    std::cout<<"from MinMax funciton, min is "<<minint<<" and max is: "<<maxint<<" \\n";  $/;"	l
maxint	Main.cpp	/^    std::cout<<"max of the intg vector is: "<<maxint<<"\\n";$/;"	l
mindouble	Main.cpp	/^    double maxdouble, mindouble;$/;"	l
mindouble	Main.cpp	/^    std::cout<<"min of the double vector is: "<<mindouble<<"\\n";$/;"	l
minint	Main.cpp	/^    int maxint, minint;$/;"	l
minint	Main.cpp	/^    std::cout<<"min of the intg vector is: "<<minint<<"\\n";$/;"	l
resize	Main.cpp	/^    list1.resize(length);$/;"	p	file:	signature:(length)
resize	Main.cpp	/^    list2.resize(length);$/;"	p	file:	signature:(length)
seed	Main.cpp	/^    unsigned int seed = (unsigned int)time(NULL);$/;"	l
sortedList1	Main.cpp	/^    std::vector<int> sortedList1;$/;"	l
std::cout	Main.cpp	/^    std::cout<<"For double vector:\\n";$/;"	m	class:std	file:
std::cout	Main.cpp	/^    std::cout<<"For int vector:\\n";$/;"	m	class:std	file:
std::cout	Main.cpp	/^    std::cout<<"max: \\n\\n";$/;"	m	class:std	file:
std::endl	Main.cpp	/^    std::cout<<argv[1]<<std::endl;$/;"	m	class:std	file:
~Stack	Stack.hpp	/^    ~Stack(void);$/;"	p	class:Stack	access:public	signature:(void)
~Stack	Stack.hpp	/^Stack<T>::~Stack(void)$/;"	f	class:Stack	signature:(void)
